package com.lycenway.chr.backbone.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.lycenway.chr.backbone.model.BinghaiProof;
import com.lycenway.chr.backbone.model.BinghaiProofModel;
import com.lycenway.chr.backbone.model.BinghaiProofSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the BinghaiProof service. Represents a row in the &quot;base_binghai_proof&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.lycenway.chr.backbone.model.BinghaiProofModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BinghaiProofImpl}.
 * </p>
 *
 * @author lycenway
 * @see BinghaiProofImpl
 * @see com.lycenway.chr.backbone.model.BinghaiProof
 * @see com.lycenway.chr.backbone.model.BinghaiProofModel
 * @generated
 */
@JSON(strict = true)
public class BinghaiProofModelImpl extends BaseModelImpl<BinghaiProof>
    implements BinghaiProofModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a Binghai Attachments Pictures model instance should use the {@link com.lycenway.chr.backbone.model.BinghaiProof} interface instead.
     */
    public static final String TABLE_NAME = "base_binghai_proof";
    public static final Object[][] TABLE_COLUMNS = {
            { "mime", Types.VARCHAR },
            { "url", Types.VARCHAR },
            { "binghaiId", Types.VARCHAR },
            { "binghaiProofId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "userName", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table base_binghai_proof (mime VARCHAR(75) null,url VARCHAR(75) null,binghaiId VARCHAR(75) null,binghaiProofId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";
    public static final String TABLE_SQL_DROP = "drop table base_binghai_proof";
    public static final String ORDER_BY_JPQL = " ORDER BY binghaiProof.binghaiProofId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY base_binghai_proof.binghaiProofId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.lycenway.chr.backbone.model.BinghaiProof"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.lycenway.chr.backbone.model.BinghaiProof"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.lycenway.chr.backbone.model.BinghaiProof"));
    private static ClassLoader _classLoader = BinghaiProof.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            BinghaiProof.class
        };
    private String _mime;
    private String _url;
    private String _binghaiId;
    private long _binghaiProofId;
    private long _groupId;
    private long _companyId;
    private long _userId;
    private String _userUuid;
    private String _userName;
    private Date _createDate;
    private Date _modifiedDate;
    private BinghaiProof _escapedModel;

    public BinghaiProofModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static BinghaiProof toModel(BinghaiProofSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        BinghaiProof model = new BinghaiProofImpl();

        model.setMime(soapModel.getMime());
        model.setUrl(soapModel.getUrl());
        model.setBinghaiId(soapModel.getBinghaiId());
        model.setBinghaiProofId(soapModel.getBinghaiProofId());
        model.setGroupId(soapModel.getGroupId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setUserId(soapModel.getUserId());
        model.setUserName(soapModel.getUserName());
        model.setCreateDate(soapModel.getCreateDate());
        model.setModifiedDate(soapModel.getModifiedDate());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<BinghaiProof> toModels(BinghaiProofSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<BinghaiProof> models = new ArrayList<BinghaiProof>(soapModels.length);

        for (BinghaiProofSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _binghaiProofId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setBinghaiProofId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _binghaiProofId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return BinghaiProof.class;
    }

    @Override
    public String getModelClassName() {
        return BinghaiProof.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("mime", getMime());
        attributes.put("url", getUrl());
        attributes.put("binghaiId", getBinghaiId());
        attributes.put("binghaiProofId", getBinghaiProofId());
        attributes.put("groupId", getGroupId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("userName", getUserName());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String mime = (String) attributes.get("mime");

        if (mime != null) {
            setMime(mime);
        }

        String url = (String) attributes.get("url");

        if (url != null) {
            setUrl(url);
        }

        String binghaiId = (String) attributes.get("binghaiId");

        if (binghaiId != null) {
            setBinghaiId(binghaiId);
        }

        Long binghaiProofId = (Long) attributes.get("binghaiProofId");

        if (binghaiProofId != null) {
            setBinghaiProofId(binghaiProofId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String userName = (String) attributes.get("userName");

        if (userName != null) {
            setUserName(userName);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }
    }

    @JSON
    @Override
    public String getMime() {
        if (_mime == null) {
            return StringPool.BLANK;
        } else {
            return _mime;
        }
    }

    @Override
    public void setMime(String mime) {
        _mime = mime;
    }

    @JSON
    @Override
    public String getUrl() {
        if (_url == null) {
            return StringPool.BLANK;
        } else {
            return _url;
        }
    }

    @Override
    public void setUrl(String url) {
        _url = url;
    }

    @JSON
    @Override
    public String getBinghaiId() {
        if (_binghaiId == null) {
            return StringPool.BLANK;
        } else {
            return _binghaiId;
        }
    }

    @Override
    public void setBinghaiId(String binghaiId) {
        _binghaiId = binghaiId;
    }

    @JSON
    @Override
    public long getBinghaiProofId() {
        return _binghaiProofId;
    }

    @Override
    public void setBinghaiProofId(long binghaiProofId) {
        _binghaiProofId = binghaiProofId;
    }

    @JSON
    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _groupId = groupId;
    }

    @JSON
    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    @Override
    public String getUserName() {
        if (_userName == null) {
            return StringPool.BLANK;
        } else {
            return _userName;
        }
    }

    @Override
    public void setUserName(String userName) {
        _userName = userName;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            BinghaiProof.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public BinghaiProof toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (BinghaiProof) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        BinghaiProofImpl binghaiProofImpl = new BinghaiProofImpl();

        binghaiProofImpl.setMime(getMime());
        binghaiProofImpl.setUrl(getUrl());
        binghaiProofImpl.setBinghaiId(getBinghaiId());
        binghaiProofImpl.setBinghaiProofId(getBinghaiProofId());
        binghaiProofImpl.setGroupId(getGroupId());
        binghaiProofImpl.setCompanyId(getCompanyId());
        binghaiProofImpl.setUserId(getUserId());
        binghaiProofImpl.setUserName(getUserName());
        binghaiProofImpl.setCreateDate(getCreateDate());
        binghaiProofImpl.setModifiedDate(getModifiedDate());

        binghaiProofImpl.resetOriginalValues();

        return binghaiProofImpl;
    }

    @Override
    public int compareTo(BinghaiProof binghaiProof) {
        long primaryKey = binghaiProof.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof BinghaiProof)) {
            return false;
        }

        BinghaiProof binghaiProof = (BinghaiProof) obj;

        long primaryKey = binghaiProof.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<BinghaiProof> toCacheModel() {
        BinghaiProofCacheModel binghaiProofCacheModel = new BinghaiProofCacheModel();

        binghaiProofCacheModel.mime = getMime();

        String mime = binghaiProofCacheModel.mime;

        if ((mime != null) && (mime.length() == 0)) {
            binghaiProofCacheModel.mime = null;
        }

        binghaiProofCacheModel.url = getUrl();

        String url = binghaiProofCacheModel.url;

        if ((url != null) && (url.length() == 0)) {
            binghaiProofCacheModel.url = null;
        }

        binghaiProofCacheModel.binghaiId = getBinghaiId();

        String binghaiId = binghaiProofCacheModel.binghaiId;

        if ((binghaiId != null) && (binghaiId.length() == 0)) {
            binghaiProofCacheModel.binghaiId = null;
        }

        binghaiProofCacheModel.binghaiProofId = getBinghaiProofId();

        binghaiProofCacheModel.groupId = getGroupId();

        binghaiProofCacheModel.companyId = getCompanyId();

        binghaiProofCacheModel.userId = getUserId();

        binghaiProofCacheModel.userName = getUserName();

        String userName = binghaiProofCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            binghaiProofCacheModel.userName = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            binghaiProofCacheModel.createDate = createDate.getTime();
        } else {
            binghaiProofCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            binghaiProofCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            binghaiProofCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        return binghaiProofCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(21);

        sb.append("{mime=");
        sb.append(getMime());
        sb.append(", url=");
        sb.append(getUrl());
        sb.append(", binghaiId=");
        sb.append(getBinghaiId());
        sb.append(", binghaiProofId=");
        sb.append(getBinghaiProofId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", userName=");
        sb.append(getUserName());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(34);

        sb.append("<model><model-name>");
        sb.append("com.lycenway.chr.backbone.model.BinghaiProof");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>mime</column-name><column-value><![CDATA[");
        sb.append(getMime());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>url</column-name><column-value><![CDATA[");
        sb.append(getUrl());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>binghaiId</column-name><column-value><![CDATA[");
        sb.append(getBinghaiId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>binghaiProofId</column-name><column-value><![CDATA[");
        sb.append(getBinghaiProofId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userName</column-name><column-value><![CDATA[");
        sb.append(getUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
