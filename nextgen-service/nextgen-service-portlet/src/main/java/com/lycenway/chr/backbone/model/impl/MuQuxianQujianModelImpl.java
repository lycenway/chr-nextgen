package com.lycenway.chr.backbone.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.lycenway.chr.backbone.model.MuQuxianQujian;
import com.lycenway.chr.backbone.model.MuQuxianQujianModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the MuQuxianQujian service. Represents a row in the &quot;base_mu_quxian_qujian&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.lycenway.chr.backbone.model.MuQuxianQujianModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MuQuxianQujianImpl}.
 * </p>
 *
 * @author lycenway
 * @see MuQuxianQujianImpl
 * @see com.lycenway.chr.backbone.model.MuQuxianQujian
 * @see com.lycenway.chr.backbone.model.MuQuxianQujianModel
 * @generated
 */
public class MuQuxianQujianModelImpl extends BaseModelImpl<MuQuxianQujian>
    implements MuQuxianQujianModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a Mgmt Unit of Quxian Qujian model instance should use the {@link com.lycenway.chr.backbone.model.MuQuxianQujian} interface instead.
     */
    public static final String TABLE_NAME = "base_mu_quxian_qujian";
    public static final Object[][] TABLE_COLUMNS = {
            { "hkey", Types.VARCHAR },
            { "muQuxianQujianId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "userName", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table base_mu_quxian_qujian (hkey VARCHAR(75) null,muQuxianQujianId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";
    public static final String TABLE_SQL_DROP = "drop table base_mu_quxian_qujian";
    public static final String ORDER_BY_JPQL = " ORDER BY muQuxianQujian.muQuxianQujianId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY base_mu_quxian_qujian.muQuxianQujianId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.lycenway.chr.backbone.model.MuQuxianQujian"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.lycenway.chr.backbone.model.MuQuxianQujian"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.lycenway.chr.backbone.model.MuQuxianQujian"));
    private static ClassLoader _classLoader = MuQuxianQujian.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            MuQuxianQujian.class
        };
    private String _hkey;
    private long _muQuxianQujianId;
    private long _groupId;
    private long _companyId;
    private long _userId;
    private String _userUuid;
    private String _userName;
    private Date _createDate;
    private Date _modifiedDate;
    private MuQuxianQujian _escapedModel;

    public MuQuxianQujianModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _muQuxianQujianId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setMuQuxianQujianId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _muQuxianQujianId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return MuQuxianQujian.class;
    }

    @Override
    public String getModelClassName() {
        return MuQuxianQujian.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("hkey", getHkey());
        attributes.put("muQuxianQujianId", getMuQuxianQujianId());
        attributes.put("groupId", getGroupId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("userName", getUserName());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String hkey = (String) attributes.get("hkey");

        if (hkey != null) {
            setHkey(hkey);
        }

        Long muQuxianQujianId = (Long) attributes.get("muQuxianQujianId");

        if (muQuxianQujianId != null) {
            setMuQuxianQujianId(muQuxianQujianId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String userName = (String) attributes.get("userName");

        if (userName != null) {
            setUserName(userName);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }
    }

    @Override
    public String getHkey() {
        if (_hkey == null) {
            return StringPool.BLANK;
        } else {
            return _hkey;
        }
    }

    @Override
    public void setHkey(String hkey) {
        _hkey = hkey;
    }

    @Override
    public long getMuQuxianQujianId() {
        return _muQuxianQujianId;
    }

    @Override
    public void setMuQuxianQujianId(long muQuxianQujianId) {
        _muQuxianQujianId = muQuxianQujianId;
    }

    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _groupId = groupId;
    }

    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @Override
    public String getUserName() {
        if (_userName == null) {
            return StringPool.BLANK;
        } else {
            return _userName;
        }
    }

    @Override
    public void setUserName(String userName) {
        _userName = userName;
    }

    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            MuQuxianQujian.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public MuQuxianQujian toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (MuQuxianQujian) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        MuQuxianQujianImpl muQuxianQujianImpl = new MuQuxianQujianImpl();

        muQuxianQujianImpl.setHkey(getHkey());
        muQuxianQujianImpl.setMuQuxianQujianId(getMuQuxianQujianId());
        muQuxianQujianImpl.setGroupId(getGroupId());
        muQuxianQujianImpl.setCompanyId(getCompanyId());
        muQuxianQujianImpl.setUserId(getUserId());
        muQuxianQujianImpl.setUserName(getUserName());
        muQuxianQujianImpl.setCreateDate(getCreateDate());
        muQuxianQujianImpl.setModifiedDate(getModifiedDate());

        muQuxianQujianImpl.resetOriginalValues();

        return muQuxianQujianImpl;
    }

    @Override
    public int compareTo(MuQuxianQujian muQuxianQujian) {
        long primaryKey = muQuxianQujian.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof MuQuxianQujian)) {
            return false;
        }

        MuQuxianQujian muQuxianQujian = (MuQuxianQujian) obj;

        long primaryKey = muQuxianQujian.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<MuQuxianQujian> toCacheModel() {
        MuQuxianQujianCacheModel muQuxianQujianCacheModel = new MuQuxianQujianCacheModel();

        muQuxianQujianCacheModel.hkey = getHkey();

        String hkey = muQuxianQujianCacheModel.hkey;

        if ((hkey != null) && (hkey.length() == 0)) {
            muQuxianQujianCacheModel.hkey = null;
        }

        muQuxianQujianCacheModel.muQuxianQujianId = getMuQuxianQujianId();

        muQuxianQujianCacheModel.groupId = getGroupId();

        muQuxianQujianCacheModel.companyId = getCompanyId();

        muQuxianQujianCacheModel.userId = getUserId();

        muQuxianQujianCacheModel.userName = getUserName();

        String userName = muQuxianQujianCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            muQuxianQujianCacheModel.userName = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            muQuxianQujianCacheModel.createDate = createDate.getTime();
        } else {
            muQuxianQujianCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            muQuxianQujianCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            muQuxianQujianCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        return muQuxianQujianCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(17);

        sb.append("{hkey=");
        sb.append(getHkey());
        sb.append(", muQuxianQujianId=");
        sb.append(getMuQuxianQujianId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", userName=");
        sb.append(getUserName());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(28);

        sb.append("<model><model-name>");
        sb.append("com.lycenway.chr.backbone.model.MuQuxianQujian");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>hkey</column-name><column-value><![CDATA[");
        sb.append(getHkey());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>muQuxianQujianId</column-name><column-value><![CDATA[");
        sb.append(getMuQuxianQujianId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userName</column-name><column-value><![CDATA[");
        sb.append(getUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
